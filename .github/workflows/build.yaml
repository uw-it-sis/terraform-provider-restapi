on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Build and Release

env:
  ARTIFACT: terraform-provider-restapi

jobs:
  build:
    name: Build and Setup Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Tag
        id: get_tag
        run: |
          ref=${{ github.ref }}
          IFS='/' # Split the tag using / as the delimiter
          read -ra TAG <<< "$ref"
          export TAG=${TAG[2]}
          # Put the tag into an environment variable
          echo "TAG=${TAG}" >> $GITHUB_ENV
        
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Compile
        run: |
          package_name=$ARTIFACT
          platforms=("linux/amd64" "windows/amd64" "darwin/amd64")
          mkdir bin
          for platform in "${platforms[@]}"
          do
              platform_split=(${platform//\// })
              GOOS=${platform_split[0]}
              GOARCH=${platform_split[1]}
              output_name=$package_name'_'$TAG'-'$GOOS'-'$GOARCH
              if [ $GOOS = "windows" ]; then
                  output_name+='.exe'
              fi
              env GOOS=$GOOS GOARCH=$GOARCH go build -o bin/$output_name $package
              if [ $? -ne 0 ]; then
                  echo 'Ker-boom!'
                  exit 1
              fi
              # Write out the binary metadata ...
              echo $platform\|$output_name >> metadata.txt
          done
          
      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: bin/*
          
      - name: Upload Binaries Metadata
        uses: actions/upload-artifact@v2
        with:
          name: metadata
          path: metadata.txt
                                 
      - name: Create Release ${{ env.TAG }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions.
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.TAG }}
          body: |
            Changes ...
            - Initial
          draft: false
          prerelease: false

      - name: Output Release URL
        shell: bash
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > url.txt

      - name: Upload Release URL
        uses: actions/upload-artifact@v2
        with:
          name: url
          path: url.txt
          
  upload:
    name: Upload Release Artifacts
    strategy:
      matrix:
        os: [linux, windows, darwin]
    runs-on: [ubuntu-latest]
    needs: build
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      
      - name: List Artifacts
        shell: bash
        run: |
          ls -R
        
      - name: Parse Binaries metadata
        shell: bash
        run: |
          line_in=
          while IFS= read -r line
          do
            if [[ $line == ${{ matrix.os }}* ]]; then
              line_in=$line
            fi
          done < metadata/metadata.txt
                
          IFS='|' # Split the line using | as the delimiter
          read -ra LINE <<< "$line_in"
          
          echo "ARTIFACT_FILENAME=${LINE[1]}" >> $GITHUB_ENV
      
      - name: Parse url
        shell: bash
        run: |
          release_url=`cat url/url.txt`
          echo "release_url=[$release_url]"
          echo "RELEASE_URL=${release_url}" >> $GITHUB_ENV

      - name: TEST get env
        shell: bash
        run: |
          cat "$GITHUB_ENV"
          # release_url=`cat url/url.txt`
          # echo "RELEASE_URL=${release_url} >> $GITHUB_ENV"
        
        
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_URL }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          asset_path: ./binaries/${{ env.ARTIFACT_FILENAME }}
          asset_name: ${{ env.ARTIFACT_FILENAME }}
          asset_content_type: application/octet-stream
        
